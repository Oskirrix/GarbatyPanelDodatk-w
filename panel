// ==UserScript==
// @name         Garbaty Panel Dodatków
// @namespace    http://tampermonkey.net/
// @version      4.8
// @description  Panel dodatków na Sigma Interfejs
// @author       Kuchar
// @match        https://*.margonem.pl/*
// @exclude      https://margonem.pl/
// @grant        none
// @updateURL    https://raw.githubusercontent.com/Oskirrix/GarbatyPanelDodatk-w/main/GarbatyPanel.user.js
// @downloadURL  https://raw.githubusercontent.com/Oskirrix/GarbatyPanelDodatk-w/main/GarbatyPanel.user.js
// ==/UserScript==

(function() {
    'use strict';

    // --- KONFIGURACJA DODATKÓW ---
    const ADDONS = [
        {
            key: 'lootlogE2',
            name: 'Powiadomienie na Lootlog o E2',
            src: 'https://addons2.margonem.pl/get/153/153576dev.js',
            desc: 'Powiadomienie na lootlog o pojawieniu się E2',
            hasSettings: true
        },
        {
            key: 'useItemAfterFight',
            name: 'Użycie przedmiotu po walce',
            src: 'https://addons2.margonem.pl/get/153/153575dev.js',
            desc: 'Automatyczne użycie wybranego przedmiotu po walce'
        },
        {
            key: 'autodobijanieSI',
            name: 'Autodobijanie SI',
            src: 'https://addons2.margonem.pl/get/153/153574dev.js',
            desc: 'Automatyczne dobijanie Sztucznej Inteligencji'
        },
        {
            key: 'kalendarz',
            name: 'Kalendarz',
            src: 'https://addons2.margonem.pl/get/153/153572dev.js',
            desc: 'Wyświetlanie kalendarza wydarzeń'
        },
        {
            key: 'odnosnik',
            name: 'Odnośnik',
            src: 'https://addons2.margonem.pl/get/153/153600dev.js',
            desc: 'Nowy dodatek Odnośnik'
        }
    ];

    // --- STAŁE ---
    const STORAGE_KEYS = {
        ADDONS: (nick) => `garbaty_addons_${nick}`,
        POS: 'garbaty_position',
        VISIBLE: 'garbaty_visible',
        LOOTLOG: (character) => `garbaty_lootlog_${character}`
    };

    function getJSON(key, def = {}) {
        try { return JSON.parse(localStorage.getItem(key)) || def }
        catch { return def }
    }
    function setJSON(key, value) {
        localStorage.setItem(key, JSON.stringify(value));
    }
    function getCurrentCharacter() {
        return document.getElementById('nick')?.textContent?.trim() || 'unknown_character';
    }
    function getLootlogs() {
        return Array.from(document.querySelectorAll('.cll-launcher'))
            .map(el => ({ name: el.getAttribute('tip'), element: el }));
    }

    function createPanel() {
        const oldPanel = document.getElementById('garbaty-panel');
        if (oldPanel) oldPanel.remove();

        const pos = getJSON(STORAGE_KEYS.POS, {top: 10, left: 10});
        const visible = localStorage.getItem(STORAGE_KEYS.VISIBLE) !== 'false';
        const nick = getCurrentCharacter();
        const selectedAddons = getJSON(STORAGE_KEYS.ADDONS(nick), {});
        const panel = document.createElement('div');
        panel.id = 'garbaty-panel';
        Object.assign(panel.style, {
            position: 'fixed',
            top: pos.top + 'px',
            left: pos.left + 'px',
            width: '320px',
            background: '#222',
            color: '#fff',
            padding: '12px',
            borderRadius: '8px',
            zIndex: 99999,
            cursor: 'move',
            boxShadow: '0 0 15px #000',
            userSelect: 'none',
            display: visible ? 'block' : 'none'
        });

        // Bez nicku postaci!
        panel.innerHTML = `<div style="font-weight:bold;margin-bottom:10px;">Garbaty Panel (SI)</div>`;

        ADDONS.forEach(addon => {
            const container = document.createElement('div');
            container.style.display = 'flex';
            container.style.alignItems = 'center';
            container.style.marginBottom = '8px';

            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.checked = !!selectedAddons[addon.key];
            checkbox.dataset.key = addon.key;
            checkbox.style.marginRight = '8px';
            container.appendChild(checkbox);

            const name = document.createElement('span');
            name.textContent = addon.name;
            name.title = addon.desc;
            name.style.flex = '1';
            container.appendChild(name);

            if (addon.hasSettings) {
                const gear = document.createElement('span');
                gear.innerHTML = '⚙️';
                gear.title = 'Ustawienia';
                gear.style.cursor = 'pointer';
                gear.style.marginLeft = '8px';
                gear.onclick = (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    showLootlogSettings();
                };
                container.appendChild(gear);
            }

            panel.appendChild(container);
        });

        const saveBtn = document.createElement('button');
        saveBtn.textContent = 'Zapisz i przeładuj';
        saveBtn.style.width = '100%';
        saveBtn.style.marginTop = '10px';
        saveBtn.onclick = () => {
            const newSelected = {};
            panel.querySelectorAll('input[type=checkbox]').forEach(checkbox => {
                if (checkbox.checked && checkbox.dataset.key) {
                    newSelected[checkbox.dataset.key] = true;
                }
            });
            setJSON(STORAGE_KEYS.ADDONS(nick), newSelected);
            window.location.reload();
        };
        panel.appendChild(saveBtn);

        document.body.appendChild(panel);
        makeDraggable(panel);

        document.addEventListener('keydown', e => {
            if (e.ctrlKey && e.altKey && e.key.toLowerCase() === 'k') {
                const panel = document.getElementById('garbaty-panel');
                if (!panel) return;
                if (panel.style.display === 'none') {
                    panel.style.display = 'block';
                    localStorage.setItem(STORAGE_KEYS.VISIBLE, 'true');
                } else {
                    panel.style.display = 'none';
                    localStorage.setItem(STORAGE_KEYS.VISIBLE, 'false');
                }
            }
        });
    }

    function showLootlogSettings() {
        const oldModal = document.getElementById('garbaty-addon-settings');
        if (oldModal) oldModal.remove();

        const modal = document.createElement('div');
        modal.id = 'garbaty-addon-settings';
        Object.assign(modal.style, {
            position: 'fixed',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%,-50%)',
            background: '#222',
            color: '#fff',
            padding: '20px',
            borderRadius: '10px',
            zIndex: 100000,
            boxShadow: '0 0 20px #000'
        });

        const currentCharacter = getCurrentCharacter();
        const selectedLootlog = localStorage.getItem(STORAGE_KEYS.LOOTLOG(currentCharacter)) || '';

        modal.innerHTML = `<b>Ustawienia powiadomień E2</b><br><br>`;

        const lootlogs = getLootlogs();
        if (lootlogs.length === 0) {
            modal.innerHTML += '<i>Nie znaleziono żadnych lootlogów!</i>';
        } else {
            const select = document.createElement('select');
            select.style.width = '100%';
            select.style.margin = '8px 0';
            lootlogs.forEach(ll => {
                const option = document.createElement('option');
                option.value = ll.name;
                option.textContent = ll.name;
                option.selected = ll.name === selectedLootlog;
                select.appendChild(option);
            });

            modal.appendChild(document.createTextNode('Wybierz lootlog do powiadomień:'));
            modal.appendChild(document.createElement('br'));
            modal.appendChild(select);

            const saveBtn = document.createElement('button');
            saveBtn.textContent = 'Zapisz';
            saveBtn.style.marginRight = '8px';
            saveBtn.onclick = () => {
                localStorage.setItem(STORAGE_KEYS.LOOTLOG(currentCharacter), select.value);
                modal.remove();
            };

            const closeBtn = document.createElement('button');
            closeBtn.textContent = 'Zamknij';
            closeBtn.onclick = () => modal.remove();

            const buttonContainer = document.createElement('div');
            buttonContainer.style.marginTop = '16px';
            buttonContainer.style.textAlign = 'center';
            buttonContainer.appendChild(saveBtn);
            buttonContainer.appendChild(closeBtn);
            modal.appendChild(buttonContainer);
        }

        document.body.appendChild(modal);
    }

    function makeDraggable(panel) {
        let isDragging = false;
        let offset = [0, 0];

        panel.addEventListener('mousedown', e => {
            if (e.target.tagName === 'INPUT' || e.target.tagName === 'SELECT' || e.target.tagName === 'BUTTON') return;
            isDragging = true;
            offset = [
                e.clientX - panel.offsetLeft,
                e.clientY - panel.offsetTop
            ];
        });

        document.addEventListener('mousemove', e => {
            if (!isDragging) return;
            e.preventDefault();
            const x = e.clientX - offset[0];
            const y = e.clientY - offset[1];
            panel.style.left = Math.max(0, Math.min(x, window.innerWidth - panel.offsetWidth)) + 'px';
            panel.style.top = Math.max(0, Math.min(y, window.innerHeight - panel.offsetHeight)) + 'px';
        });

        document.addEventListener('mouseup', () => {
            if (!isDragging) return;
            isDragging = false;
            setJSON(STORAGE_KEYS.POS, {
                left: parseInt(panel.style.left),
                top: parseInt(panel.style.top)
            });
        });
    }

    function init() {
        createPanel();
        const nick = getCurrentCharacter();
        const selectedAddons = getJSON(STORAGE_KEYS.ADDONS(nick), {});
        ADDONS.forEach(addon => {
            if (selectedAddons[addon.key] && addon.src) {
                // Powiadamiacz E2 ładuje się z opóźnieniem 2s
                if (addon.key === 'lootlogE2') {
                    setTimeout(() => {
                        const script = document.createElement('script');
                        script.src = addon.src + '?v=' + Date.now();
                        document.head.appendChild(script);
                        console.log('[GarbatyPanel] (opóźnione) Ładuję dodatek:', addon.name);
                    }, 2000);
                } else {
                    // Pozostałe dodatki od razu
                    const script = document.createElement('script');
                    script.src = addon.src + '?v=' + Date.now();
                    document.head.appendChild(script);
                    console.log('[GarbatyPanel] Ładuję dodatek:', addon.name);
                }
            }
        });
    }

    const checkReady = setInterval(() => {
        if (document.readyState === 'complete') {
            clearInterval(checkReady);
            setTimeout(init, 1000);
        }
    }, 100);
})();
